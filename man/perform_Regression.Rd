% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/perform_Regression.R
\name{perform_Regression}
\alias{perform_Regression}
\title{Perform LASSO and Elastic Net Regression with Cross-Validation}
\usage{
perform_Regression(
  data,
  method = "enet",
  specify_response = NULL,
  train_percent = 80,
  ref = NULL,
  lambda = "1se",
  remember = NULL,
  verbose = TRUE,
  cv_folds = 10,
  parallel = FALSE
)
}
\arguments{
\item{data}{A list object containing preprocessed data. Must be the output from the
\code{perform_PreprocessingPeakData} function, containing the following elements:
\itemize{
\item{\code{FunctionOrigin}}: Character string indicating data source
\item{\code{Metadata}}: Data frame with sample metadata including Group column
\item{\code{data_scaledPCA_rsdFiltered_varFiltered}}: Matrix of preprocessed features
}}

\item{method}{Character vector specifying regression method(s) to perform. Options:
\itemize{
\item{\code{"lasso"}}: LASSO regression only (L1 penalty, alpha = 1)
\item{\code{"enet"}}: Elastic Net regression only (L1+L2 penalty, alpha = 0.5)
\item{\code{c("lasso", "enet")}}: Both methods (recommended for comparison)
}
Default: \code{"enet"}}

\item{specify_response}{Character string specifying the response variable column name.
If \code{NULL}, uses the Group column from metadata. Default: \code{NULL}}

\item{train_percent}{Numeric value between 1 and 99 specifying the percentage of data
to use for training. Remaining data used for testing. Default: \code{80}}

\item{ref}{Character string specifying the reference level for the response variable.
If \code{NULL}, uses the first factor level alphabetically. Default: \code{NULL}}

\item{lambda}{Character string specifying lambda selection criterion:
\itemize{
\item{\code{"1se"}}: Lambda within one standard error of minimum (conservative, fewer features)
\item{\code{"min"}}: Lambda that minimizes cross-validation error (aggressive, more features)
}
Default: \code{"1se"}}

\item{remember}{Numeric value for reproducible results. Sets random seed using
\code{set.seed(remember)}. If \code{NULL}, no seed is set. Default: \code{NULL}}

\item{verbose}{Logical indicating whether to print progress messages and results
to console. Default: \code{TRUE}}

\item{cv_folds}{Integer specifying number of cross-validation folds for model
selection. Must be between 3 and 20. Default: \code{10}}

\item{parallel}{Logical indicating whether to use parallel processing for
cross-validation. Default: \code{FALSE}}
}
\value{
A list containing regression results with the following structure:
\describe{
\item{\code{FunctionOrigin}}{Character string identifying the source function}
\item{\code{ModelSummary}}{Data frame summarizing model performance metrics}
\item{\code{DataSplit}}{List containing training/testing data split information}
\item{\code{LASSO_Results}}{List of LASSO results (if method includes "lasso")}
\item{\code{ElasticNet_Results}}{List of Elastic Net results (if method includes "enet")}
\item{\code{ComparisonSummary}}{Data frame comparing methods (if both performed)}
}

Each method-specific results list contains:
\itemize{
\item{\code{Model}}: Fitted cv.glmnet object
\item{\code{Predictions}}: Data frame with actual vs predicted values
\item{\code{ConfusionMatrix}}: Complete confusion matrix object
\item{\code{Performance}}: Data frame with accuracy, sensitivity, specificity, etc.
\item{\code{Coefficients}}: Data frame with non-zero coefficients and odds ratios
\item{\code{Lambda}}: Selected lambda value
\item{\code{Alpha}}: Alpha parameter used
\item{\code{ReferenceLevel}}: Reference level for classification
}
}
\description{
This function performs regularized regression analysis using LASSO (Least Absolute
Shrinkage and Selection Operator) and/or Elastic Net regression methods. Both methods
are regularization techniques that prevent overfitting by adding penalty terms to the
loss function. LASSO uses L1 regularization for feature selection by shrinking
coefficients to zero, while Elastic Net combines L1 and L2 penalties to handle
multicollinearity and perform simultaneous feature selection. The function supports
both binary and multinomial classification tasks with comprehensive model evaluation
and result reporting.
}
\details{
Perform Regularized Regression Analysis
}
\examples{
\dontrun{
# Load required libraries
library(glmnet)
library(caret)
library(dplyr)

# Perform both LASSO and Elastic Net regression
regression_results <- perform_Regression(
  data = preprocessed_data,
  method = c("lasso", "enet"),
  train_percent = 75,
  lambda = "1se",
  remember = 123,
  cv_folds = 10
)

# View model comparison
print(regression_results$ModelSummary)
print(regression_results$ComparisonSummary)

# Access LASSO results
lasso_coef <- regression_results$LASSO_Results$Coefficients
lasso_perf <- regression_results$LASSO_Results$Performance

# Access Elastic Net results
enet_coef <- regression_results$ElasticNet_Results$Coefficients
enet_perf <- regression_results$ElasticNet_Results$Performance

# View confusion matrices
print(regression_results$LASSO_Results$ConfusionMatrix$table)
print(regression_results$ElasticNet_Results$ConfusionMatrix$table)
}

}
\seealso{
\code{\link[glmnet]{cv.glmnet}}, \code{\link[caret]{confusionMatrix}}
}
